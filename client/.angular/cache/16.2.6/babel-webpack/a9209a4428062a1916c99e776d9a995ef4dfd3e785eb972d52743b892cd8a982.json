{"ast":null,"code":"var _a;\nimport { __decorate, __metadata } from \"tslib\";\nimport { Component, ViewChild, ElementRef, HostListener } from '@angular/core';\nimport { DdiService } from '../ddi.service';\nimport { xml2json } from '../../assets/js/xml2json';\nimport { MatLegacySnackBar as MatSnackBar } from '@angular/material/legacy-snack-bar';\nimport { VarComponent } from '../var/var.component';\nimport * as FileSaver from 'file-saver';\nimport * as XMLWriter from 'xml-writer';\nimport { TranslateService } from '@ngx-translate/core';\nimport { VarGroupComponent } from '../var-group/var-group.component';\nimport { MatomoTracker } from '@ngx-matomo/tracker';\ni;\nmport;\n{\n  ConfigService;\n}\nfrom;\n'../config.service';\nlet InterfaceComponent = class InterfaceComponent {\n  // translate: TranslateService;\n  constructor(ddiService, snackBar, tracker, translate, config) {\n    this.ddiService = ddiService;\n    this.snackBar = snackBar;\n    this.tracker = tracker;\n    this.translate = translate;\n    this.config = config;\n    this.data = null; // store the xml\n    this.ddiLoaded = false; // show the loading\n    this.variableGroups = []; // store the variables in an array display\n    this._variables = []; // store the variables to be broadcast to child\n    this._id = null; // file id\n    this.metaId = null;\n    this.baseUrl = null;\n    this.siteUrl = null;\n    this.dvLocale = null;\n    this.tracker.trackPageView();\n    this.translate.addLangs(['English', 'Français', 'Português']);\n    this.translate.setDefaultLang('English');\n    const browserLang = this.translate.getBrowserLang();\n    this.translate.use(browserLang.match(/English|Français|Português/) ? browserLang : 'English');\n  }\n  doSomething($event) {\n    console.log(this.child.varChange + ' ' + this.childGroups.groupChange);\n    if (this.child.varChange === true || this.childGroups.groupChange === true) {\n      $event.returnValue = 'You have unsaved changes - are you sure you want to exit?';\n      return $event.returnValue;\n    }\n  }\n  ngOnInit() {\n    let uri = null;\n    this.siteUrl = this.ddiService.getParameterByName('siteUrl');\n    this.baseUrl = this.ddiService.getBaseUrl();\n    this._id = this.ddiService.getParameterByName('dfId');\n    this.metaId = this.ddiService.getParameterByName('fileMetadataId');\n    this.dvLocale = this.ddiService.getParameterByName('dvLocale');\n    if (this.dvLocale != null) {\n      if (this.dvLocale === 'en') {\n        this.translate.use('English');\n      } else if (this.dvLocale === 'fr') {\n        this.translate.use('Français');\n      } else {\n        const browserLang = this.translate.getBrowserLang();\n        this.translate.use(browserLang.match(/English|Français|Português/) ? browserLang : 'English');\n      }\n    } else {\n      const browserLang = this.translate.getBrowserLang();\n      this.translate.use(browserLang.match(/English|Français|Português/) ? browserLang : 'English');\n    }\n    if (!this.siteUrl && this._id != null) {\n      uri = this.baseUrl + '/api/access/datafile/' + this._id + '/metadata/ddi';\n      if (this.metaId != null) {\n        uri = uri + '?fileMetadataId=' + this.metaId;\n      }\n    } else {\n      if (this.siteUrl) {\n        uri = this.siteUrl + '/api/access/datafile/' + this._id + '/metadata/ddi';\n        if (this.metaId != null) {\n          uri = uri + '?fileMetadataId=' + this.metaId;\n        }\n      } else {\n        // Just for testing purposes\n        uri = this.baseUrl + '/assets/FOCN_SPSS_20150525_FORMATTED-ddi.xml';\n        // if (!this._id) {\n        //   uri = window.location.href;\n        //   uri = uri + '/assets/test_groups.xml';\n        //   // uri = this.baseUrl + '/assets/arg-drones-E-2014-can.xml';\n        // } else {\n        //   uri =\n        //     this.baseUrl + '/api/access/datafile/' + this._id + '/metadata/ddi';\n        //   if (this.metaId != null) {\n        //     uri = uri + '?fileMetadataId=' + this.metaId;\n        //   }\n        // }\n      }\n    }\n\n    this.getDDI(uri);\n    // this.translate.getLangs();\n  }\n\n  getDDI(_uri) {\n    const url = _uri;\n    this.ddiService.getDDI(url).subscribe(data => this.processDDI(data), error => console.log(error), () => this.completeDDI());\n  }\n  scrollNav() {\n    const elm = this.myScrollContainer['_elementRef'].nativeElement;\n    elm.scrollTop = elm.scrollHeight;\n  }\n  processDDI(data) {\n    const parser = new DOMParser();\n    console.log(parser.parseFromString(data, 'text/xml'));\n    this.data = parser.parseFromString(data, 'text/xml');\n  }\n  completeDDI() {\n    this.showVarsGroups();\n    this.showVars();\n    this.title = this.data.getElementsByTagName('stdyDscr')[0].getElementsByTagName('titl')[0].textContent;\n    const citation = this.data.getElementsByTagName('stdyDscr')[0].getElementsByTagName('biblCit')[0].textContent;\n    const start = citation.indexOf('http');\n    const temp = citation.substr(start);\n    const end = temp.indexOf(',');\n    this.doi = temp.substr(0, end);\n    this.firstCitat = citation.substr(0, start);\n    this.firstCitat = this.firstCitat;\n    this.secondCitat = temp.substr(end);\n    this.secondCitat = this.secondCitat;\n    this.filename = this.data.getElementsByTagName('fileDscr')[0].getElementsByTagName('fileName')[0].textContent;\n    this.showDDI();\n    const agency = this.data.getElementsByTagName('IDNo')[0];\n    const obj = JSON.parse(xml2json(agency, ''));\n  }\n  showVarsGroups() {\n    const elm = this.data.getElementsByTagName('varGrp');\n    for (const elmIn of elm) {\n      const obj = JSON.parse(xml2json(elmIn, ''));\n      if (typeof obj.varGrp['@var'] === 'undefined') {\n        obj.varGrp['@var'] = '';\n      }\n      this.variableGroups.push(obj);\n    }\n  }\n  showVars() {\n    const variables = [];\n    const elm = this.data.getElementsByTagName('var');\n    for (const elm_in of elm) {\n      variables.push(JSON.parse(xml2json(elm_in, '')));\n    }\n    // flatten the table structure so it can be sorted/filtered appropriately\n    const flat_array = [];\n    for (let i = 0; i < variables.length; i++) {\n      const obj = variables[i];\n      // make equivalent variable to allow sorting\n      for (const j in obj.var) {\n        if (j.indexOf('@') === 0) {\n          obj.var[j.substring(1).toLowerCase()] = obj.var[j];\n        }\n      }\n      if (typeof obj.var.catgry !== 'undefined') {\n        if (typeof obj.var.catgry.length === 'undefined') {\n          // If there is only one category\n          obj.var.catgry = [obj.var.catgry];\n        }\n        let sumCount = 0;\n        for (let k = 0; k < obj.var.catgry.length; k++) {\n          if (typeof obj.var.catgry[k].catStat !== 'undefined') {\n            if (typeof obj.var.catgry[k].catStat.length === 'undefined') {\n              obj.var.catgry[k].catStat = [obj.var.catgry[k].catStat];\n            }\n            // tslint:disable-next-line:radix\n            sumCount = sumCount + parseInt(obj.var.catgry[k].catStat[0]['#text']);\n          }\n        }\n        for (let k = 0; k < obj.var.catgry.length; k++) {\n          if (typeof obj.var.catgry[k].catStat !== 'undefined') {\n            // tslint:disable-next-line:radix\n            obj.var.catgry[k].countPerc = parseInt(obj.var.catgry[k].catStat[0]['#text']) * 100 / sumCount;\n          }\n        }\n        obj.var.sumCount = sumCount;\n      }\n      if (typeof obj.var.universe !== 'undefined') {\n        if (typeof obj.var.universe.size === 'undefined') {\n          obj.var.universe = {\n            '#text': obj.var.universe\n          };\n        }\n      }\n      if (typeof obj.var.notes !== 'undefined') {\n        if (typeof obj.var.notes.length !== undefined && obj.var.notes.length === 2) {\n          obj.var.notes = {\n            '#cdata': obj.var.notes[1]['#cdata'],\n            '#text': obj.var.notes[0]['#text'],\n            '@level': obj.var.notes[0]['@level'],\n            '@subject': obj.var.notes[0]['@subject'],\n            '@type': obj.var.notes[0]['@type']\n          };\n        }\n      }\n      flat_array.push(obj.var);\n    }\n    this._variables = flat_array;\n    this.child.onUpdateVars(this._variables);\n  }\n  // pass the selected ids to the var table for display\n  broadcastSubSetRows(ids) {\n    this.child.onSubset(ids);\n  }\n  broadcastSelect(_id) {\n    // set the var table header to show the selection\n    this.child.selectGroup(_id);\n  }\n  broadcastDeselectGroup() {\n    this.child.disableSelectGroup();\n  }\n  showDDI() {\n    this.ddiLoaded = true;\n  }\n  // Create the XML File\n  makeXML(dv) {\n    const doc = new XMLWriter();\n    doc.startDocument();\n    doc.startElement('codeBook');\n    const codeBook = this.data.getElementsByTagName('codeBook')[0];\n    const obj = JSON.parse(xml2json(codeBook, ''));\n    doc.writeAttribute('xmlns', obj.codeBook['@xmlns']);\n    doc.writeAttribute('version', obj.codeBook['@version']);\n    if (dv === false) {\n      this.addStdyDscr(doc);\n      this.addFileDscr(doc);\n    }\n    doc.startElement('dataDscr');\n    // add groups\n    for (const group of this.variableGroups) {\n      if (group.varGrp.labl !== null && group.varGrp.labl.trim() !== '') {\n        doc.startElement('varGrp');\n        doc.writeAttribute('ID', group.varGrp['@ID']);\n        doc.writeAttribute('var', group.varGrp['@var']);\n        doc.startElement('labl');\n        doc.text(group.varGrp.labl);\n        doc.endElement();\n        doc.endElement();\n      }\n    }\n    // add variables\n    for (let i = 0; i < this._variables.length; i++) {\n      // start variable (var)\n      doc.startElement('var');\n      doc.writeAttribute('ID', this._variables[i]['@ID']);\n      doc.writeAttribute('name', this._variables[i]['@name']);\n      if (typeof this._variables[i]['@intrvl'] !== 'undefined') {\n        doc.writeAttribute('intrvl', this._variables[i]['@intrvl']);\n      }\n      if (typeof this._variables[i]['@wgt'] !== 'undefined' && this._variables[i]['@wgt'] !== '') {\n        doc.writeAttribute('wgt', this._variables[i]['@wgt']);\n      }\n      if (typeof this._variables[i]['@wgt-var'] !== 'undefined' && this._variables[i]['@wgt-var'] !== '') {\n        doc.writeAttribute('wgt-var', this._variables[i]['@wgt-var']);\n      }\n      // start location\n      if (typeof this._variables[i].location !== 'undefined') {\n        doc.startElement('location').writeAttribute('fileid', this._variables[i].location['@fileid']);\n        doc.endElement();\n      }\n      // end location\n      // start labl\n      if (typeof this._variables[i].labl !== 'undefined') {\n        doc.startElement('labl');\n        doc.writeAttribute('level', this._variables[i].labl['@level']);\n        doc.text(this._variables[i].labl['#text']);\n        doc.endElement();\n      }\n      // end labl\n      // start sumStat\n      if (typeof this._variables[i].sumStat !== 'undefined') {\n        if (typeof this._variables[i].sumStat.length !== 'undefined') {\n          for (let j = 0; j < this._variables[i].sumStat.length; j++) {\n            doc.startElement('sumStat');\n            doc.writeAttribute('type', this._variables[i].sumStat[j]['@type']);\n            doc.text(this._variables[i].sumStat[j]['#text']);\n            doc.endElement();\n          }\n        }\n      }\n      // end sumStat\n      // start catgry\n      if (typeof this._variables[i].catgry !== 'undefined') {\n        if (typeof this._variables[i].catgry.length !== 'undefined') {\n          for (let j = 0; j < this._variables[i].catgry.length; j++) {\n            doc.startElement('catgry');\n            if (typeof this._variables[i].catgry[j].catValu !== 'undefined') {\n              doc.startElement('catValu').text(this._variables[i].catgry[j].catValu);\n              doc.endElement();\n            }\n            if (typeof this._variables[i].catgry[j].labl !== 'undefined') {\n              doc.startElement('labl');\n              doc.writeAttribute('level', this._variables[i].catgry[j].labl['@level']);\n              doc.text(this._variables[i].catgry[j].labl['#text']);\n              doc.endElement();\n            }\n            if (typeof this._variables[i].catgry[j].catStat !== 'undefined') {\n              // frequency\n              if (typeof this._variables[i].catgry[j].catStat.length !== 'undefined') {\n                doc.startElement('catStat');\n                doc.writeAttribute('type', this._variables[i].catgry[j].catStat[0]['@type']);\n                doc.text(this._variables[i].catgry[j].catStat[0]['#text']);\n                doc.endElement();\n                // weighted frequency\n                if (this._variables[i].catgry[j].catStat.length > 1) {\n                  doc.startElement('catStat');\n                  doc.writeAttribute('wgtd', this._variables[i].catgry[j].catStat[1]['@wgtd']);\n                  doc.writeAttribute('type', this._variables[i].catgry[j].catStat[1]['@type']);\n                  doc.text(this._variables[i].catgry[j].catStat[1]['#text']);\n                  doc.endElement();\n                }\n              }\n            }\n            doc.endElement();\n          }\n        }\n      }\n      // end catgry\n      // start qstn\n      if (typeof this._variables[i].qstn !== 'undefined' && (typeof this._variables[i].qstn.qstnLit !== 'undefined' && this._variables[i].qstn.qstnLit !== '' || typeof this._variables[i].qstn.ivuInstr !== 'undefined' && this._variables[i].qstn.ivuInstr !== '' || typeof this._variables[i].qstn.postQTxt !== 'undefined' && this._variables[i].qstn.postQTxt !== '')) {\n        doc.startElement('qstn');\n        if (typeof this._variables[i].qstn.qstnLit !== 'undefined') {\n          doc.startElement('qstnLit').text(this._variables[i].qstn.qstnLit);\n          doc.endElement();\n        }\n        if (typeof this._variables[i].qstn.ivuInstr !== 'undefined') {\n          doc.startElement('ivuInstr').text(this._variables[i].qstn.ivuInstr);\n          doc.endElement();\n        }\n        if (typeof this._variables[i].qstn.postQTxt !== 'undefined') {\n          doc.startElement('postQTxt').text(this._variables[i].qstn.postQTxt);\n          doc.endElement();\n        }\n        doc.endElement();\n      }\n      // end qstn\n      // start varFormat\n      if (typeof this._variables[i].varFormat !== 'undefined') {\n        doc.startElement('varFormat');\n        doc.writeAttribute('type', this._variables[i].varFormat['@type']);\n        doc.endElement();\n      }\n      // end varFormat\n      // start notes\n      if (typeof this._variables[i].notes !== 'undefined') {\n        // start notes cdata\n        if (typeof this._variables[i].notes['#cdata'] !== 'undefined' && this._variables[i].notes['#cdata'] !== '') {\n          doc.startElement('notes');\n          doc.startCData();\n          doc.writeCData(this._variables[i].notes['#cdata']);\n          doc.endCData();\n          doc.endElement();\n        }\n        // end notes cdata\n        doc.startElement('notes');\n        doc.writeAttribute('subject', this._variables[i].notes['@subject']);\n        doc.writeAttribute('level', this._variables[i].notes['@level']);\n        doc.writeAttribute('type', this._variables[i].notes['@type']);\n        doc.text(this._variables[i].notes['#text']);\n        doc.endElement();\n      }\n      // end notes\n      // start universe\n      if (typeof this._variables[i].universe !== 'undefined' && this._variables[i].universe['#text'] !== '') {\n        doc.startElement('universe');\n        doc.text(this._variables[i].universe['#text']);\n        doc.endElement();\n      }\n      // end universe\n      // end variable (var)\n      doc.endElement();\n    }\n    doc.endElement();\n    doc.endDocument();\n    return doc;\n  }\n  addStdyDscr(doc) {\n    doc.startElement('stdyDscr');\n    doc.startElement('citation');\n    doc.startElement('titlStmt');\n    const titl = this.data.getElementsByTagName('titl')[0].textContent;\n    doc.startElement('titl').text(titl);\n    doc.endElement(); // end titl\n    doc.startElement('IDNo');\n    const agency = this.data.getElementsByTagName('IDNo')[0];\n    const obj = JSON.parse(xml2json(agency, ''));\n    doc.writeAttribute('agency', obj.IDNo['@agency']).text(obj.IDNo['#text']);\n    doc.endElement('IDNo'); // end IDNo\n    doc.endElement(); // end titlStmt\n    doc.startElement('rspStmt');\n    const AuthEnty = this.data.getElementsByTagName('AuthEnty')[0].textContent;\n    doc.startElement('AuthEnty').text(AuthEnty);\n    doc.endElement(); // end AuthEnty\n    doc.endElement(); // end rspStmt\n    const biblCit = this.data.getElementsByTagName('biblCit')[0].textContent;\n    doc.startElement('biblCit').text(biblCit);\n    doc.endElement(); // biblCit\n    doc.endElement(); // end citation\n    doc.endElement(); // end stdyDscr\n  }\n\n  addFileDscr(doc) {\n    doc.startElement('fileDscr');\n    const fileDscr = this.data.getElementsByTagName('fileDscr')[0];\n    const obj = JSON.parse(xml2json(fileDscr, ''));\n    doc.writeAttribute('ID', obj.fileDscr['@ID']);\n    doc.startElement('fileTxt');\n    const fileName = this.data.getElementsByTagName('fileName')[0].textContent;\n    doc.startElement('fileName').text(fileName);\n    doc.endElement(); // end fileName\n    doc.startElement('dimensns');\n    doc.startElement('caseQnty').text(obj.fileDscr.fileTxt.dimensns.caseQnty);\n    doc.endElement(); // end caseQnty\n    doc.startElement('varQnty').text(obj.fileDscr.fileTxt.dimensns.varQnty);\n    doc.endElement(); // end varQnty\n    doc.endElement(); // end dimensns\n    doc.startElement('fileType').text(obj.fileDscr.fileTxt.fileType);\n    doc.endElement(); // fileType\n    doc.endElement(); // fileTxt\n    const notes = fileDscr.getElementsByTagName('notes');\n    console.log(notes);\n    for (const note of notes) {\n      const newNote = JSON.parse(xml2json(note, ''));\n      console.log(newNote);\n      doc.startElement('notes');\n      doc.writeAttribute('level', newNote.notes['@level']);\n      doc.writeAttribute('type', newNote.notes['@type']);\n      doc.writeAttribute('subject', newNote.notes['@subject']);\n      doc.text(newNote.notes['#text']);\n      doc.endElement(); // end notes\n    }\n\n    doc.endElement(); // end fileDscr\n  }\n  // Save the XML file locally\n  onSave() {\n    const dv = false;\n    const doc = this.makeXML(dv);\n    const text = new Blob([doc.toString()], {\n      type: 'application/xml'\n    });\n    const tl = this.title + '.xml';\n    FileSaver.saveAs(text, 'dct.xml');\n  }\n  // Send the XML to Dataverse\n  sendToDV() {\n    const key = this.ddiService.getParameterByName('key');\n    const dv = true;\n    const doc = this.makeXML(dv);\n    let url = null;\n    if (key !== null) {\n      if (this.siteUrl !== null) {\n        url = this.siteUrl + '/api/edit/' + this._id; // + \"/\" + this.metaId;\n      } else {\n        url = this.baseUrl + '/api/edit/' + this._id;\n      }\n      this.ddiService.putDDI(url, doc.toString(), key).subscribe(data => {\n        console.log('Data ');\n        console.log(data);\n      }, error => {\n        this.snackBar.open(this.translate.instant('SAVE.CANNOT') + error, '', {\n          duration: 2000\n        });\n        console.log('Error');\n        console.log(error);\n      }, () => {\n        // console.log('Ok');\n        this.snackBar.open(this.translate.instant('SAVE.SAVED'), '', {\n          duration: 2000\n        });\n        this.child.varChange = false;\n        this.childGroups.groupChange = false;\n      });\n    } else {\n      this.snackBar.open(this.translate.instant('SAVE.MISSAPI'), '', {\n        duration: 2000\n      });\n      console.log('API Key missing');\n    }\n  }\n};\n__decorate([ViewChild(VarComponent, {\n  static: true\n}), __metadata(\"design:type\", Object)], InterfaceComponent.prototype, \"child\", void 0);\n__decorate([ViewChild(VarGroupComponent, {\n  static: true\n}), __metadata(\"design:type\", Object)], InterfaceComponent.prototype, \"childGroups\", void 0);\n__decorate([ViewChild('scrollMe', {\n  static: true\n}), __metadata(\"design:type\", ElementRef)], InterfaceComponent.prototype, \"myScrollContainer\", void 0);\n__decorate([HostListener('window:beforeunload', ['$event']), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], InterfaceComponent.prototype, \"doSomething\", null);\nInterfaceComponent = __decorate([Component({\n  selector: 'app-interface',\n  templateUrl: './interface.component.html',\n  styleUrls: ['./interface.component.css']\n}), __metadata(\"design:paramtypes\", [DdiService, MatSnackBar, MatomoTracker, TranslateService, typeof (_a = typeof ConfigService !== \"undefined\" && ConfigService) === \"function\" ? _a : Object])], InterfaceComponent);\nexport { InterfaceComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}