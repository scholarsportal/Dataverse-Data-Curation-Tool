{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { registerLocaleData } from '@angular/common';\nimport localeFrCa from '@angular/common/locales/fr-CA';\nimport { HttpClient } from '@angular/common/http';\nimport { TranslateModule, TranslateLoader } from '@ngx-translate/core';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\nimport { TranslateService, TranslateParser } from '@ngx-translate/core';\nimport { MatLegacyPaginatorIntl as MatPaginatorIntl } from '@angular/material/legacy-paginator';\nimport { MatomoTracker, NgxMatomoTrackerModule } from '@ngx-matomo/tracker';\nimport { APP_INITIALIZER } from '@angular/core';\nimport { ConfigService } from './config.service';\nimport { of } from '../../node_modules/rxjs';\nimport { map, catchError } from 'rxjs/operators';\n// the second parameter 'fr' is optional\nregisterLocaleData(localeFrCa, 'fr-CA');\nimport { MatLegacyAutocompleteModule as MatAutocompleteModule } from '@angular/material/legacy-autocomplete';\nimport { MatLegacyButtonModule as MatButtonModule } from '@angular/material/legacy-button';\nimport { MatLegacyCheckboxModule as MatCheckboxModule } from '@angular/material/legacy-checkbox';\nimport { MatLegacyChipsModule as MatChipsModule } from '@angular/material/legacy-chips';\nimport { MatLegacyDialogModule as MatDialogModule } from '@angular/material/legacy-dialog';\nimport { MatLegacyFormFieldModule as MatFormFieldModule } from '@angular/material/legacy-form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatLegacyInputModule as MatInputModule } from '@angular/material/legacy-input';\nimport { MatLegacyListModule as MatListModule } from '@angular/material/legacy-list';\nimport { MatLegacyPaginatorModule as MatPaginatorModule } from '@angular/material/legacy-paginator';\nimport { MatLegacyProgressSpinnerModule as MatProgressSpinnerModule } from '@angular/material/legacy-progress-spinner';\nimport { MatLegacySelectModule as MatSelectModule } from '@angular/material/legacy-select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatLegacySnackBarModule as MatSnackBarModule } from '@angular/material/legacy-snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatLegacyTableModule as MatTableModule } from '@angular/material/legacy-table';\nimport { MatLegacyTabsModule as MatTabsModule } from '@angular/material/legacy-tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatLegacyTooltipModule as MatTooltipModule } from '@angular/material/legacy-tooltip';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { AppComponent } from './app.component';\nimport { DdiService } from './ddi.service';\nimport { InterfaceComponent } from './interface/interface.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { VarGroupComponent } from './var-group/var-group.component';\nimport { VarComponent } from './var/var.component';\nimport { VarDialogComponent } from './var-dialog/var-dialog.component';\nimport { VarStatDialogComponent } from './var-stat-dialog/var-stat-dialog.component';\nimport { ChartComponent } from './chart/chart.component';\nimport { MyMatPaginatorIntl } from './mat-paginator-intl';\nimport { HomeComponent } from './pages/home/HomeComponent';\nexport function createTranslateLoader(http) {\n  return new TranslateHttpLoader(http);\n}\nexport function HttpLoaderFactory(httpClient) {\n  return new TranslateHttpLoader(httpClient, './assets/i18n/', '.json');\n}\nexport function createMyMatPaginatorIntl(translateService, translateParser) {\n  return new MyMatPaginatorIntl(translateService, translateParser);\n}\nexport function load(http, config) {\n  return () => {\n    return new Promise(resolve => {\n      http.get('./assets/config.json').pipe(map(x => {\n        config.baseUrl = x.baseUrl;\n        console.log(config.baseUrl);\n        config.id = x.id;\n        resolve(true);\n      }), catchError((x, caught) => {\n        if (x.status !== 404) {\n          resolve(false);\n        }\n        config.baseUrl = '';\n        config.id = -1;\n        resolve(true);\n        return of({});\n      })).subscribe();\n    });\n  };\n}\nlet AppModule = class AppModule {\n  constructor(config, tracker) {\n    this.config = config;\n    this.tracker = tracker;\n    console.log(config.baseUrl);\n    this.tracker.setSiteId(config.id);\n    this.tracker.setTrackerUrl(config.baseUrl);\n  }\n};\nAppModule = __decorate([NgModule({\n  declarations: [AppComponent, InterfaceComponent, VarGroupComponent, VarComponent, VarDialogComponent, VarStatDialogComponent, ChartComponent, HomeComponent],\n  imports: [BrowserModule, FormsModule, ReactiveFormsModule, HttpClientModule, BrowserAnimationsModule, MatButtonModule, MatTabsModule, MatIconModule, MatToolbarModule, MatTableModule, MatSortModule, MatProgressSpinnerModule, MatPaginatorModule, MatFormFieldModule, MatInputModule, MatDialogModule, MatSidenavModule, MatListModule, MatCheckboxModule, MatSelectModule, MatGridListModule, MatChipsModule, MatSnackBarModule, MatTooltipModule, MatAutocompleteModule, TranslateModule.forRoot({\n    loader: {\n      provide: TranslateLoader,\n      useFactory: HttpLoaderFactory,\n      deps: [HttpClient]\n    }\n  }), NgxMatomoTrackerModule.forRoot({\n    siteId: -1,\n    trackerUrl: '' // your matomo server root url\n  })],\n\n  exports: [],\n  providers: [DdiService, MatPaginatorIntl, {\n    provide: MatPaginatorIntl,\n    deps: [TranslateService, TranslateParser],\n    useFactory: createMyMatPaginatorIntl\n  }, {\n    provide: APP_INITIALIZER,\n    useFactory: load,\n    deps: [HttpClient, ConfigService],\n    multi: true\n  }],\n  bootstrap: [AppComponent]\n}), __metadata(\"design:paramtypes\", [ConfigService, MatomoTracker])], AppModule);\nexport { AppModule };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}