{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, forwardRef, Directive, NgModule } from '@angular/core';\nimport { MAT_LEGACY_OPTION_PARENT_COMPONENT, MAT_LEGACY_OPTGROUP, MatLegacyOption, MatLegacyOptionModule } from '@angular/material/legacy-core';\nimport { _MatAutocompleteBase, _MatAutocompleteTriggerBase, _MatAutocompleteOriginBase, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER } from '@angular/material/autocomplete';\nexport { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS as MAT_LEGACY_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY as MAT_LEGACY_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY as MAT_LEGACY_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY as MAT_LEGACY_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER as MAT_LEGACY_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MatAutocompleteSelectedEvent as MatLegacyAutocompleteSelectedEvent, getMatAutocompleteMissingPanelError as getMatLegacyAutocompleteMissingPanelError } from '@angular/material/autocomplete';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { MatCommonModule } from '@angular/material/core';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n\n/**\n * @deprecated Use `MatAutocomplete` from `@angular/material/autocomplete` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nfunction MatLegacyAutocomplete_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 0, 1);\n    i0.ɵɵprojection(2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const formFieldId_r1 = ctx.id;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"id\", ctx_r0.id)(\"ngClass\", ctx_r0._classList);\n    i0.ɵɵattribute(\"aria-label\", ctx_r0.ariaLabel || null)(\"aria-labelledby\", ctx_r0._getPanelAriaLabelledby(formFieldId_r1));\n  }\n}\nconst _c0 = [\"*\"];\nlet MatLegacyAutocomplete = /*#__PURE__*/(() => {\n  class MatLegacyAutocomplete extends _MatAutocompleteBase {\n    constructor() {\n      super(...arguments);\n      this._visibleClass = 'mat-autocomplete-visible';\n      this._hiddenClass = 'mat-autocomplete-hidden';\n      this._animationDone = null;\n    }\n    static #_ = this.ɵfac = /* @__PURE__ */function () {\n      let ɵMatLegacyAutocomplete_BaseFactory;\n      return function MatLegacyAutocomplete_Factory(t) {\n        return (ɵMatLegacyAutocomplete_BaseFactory || (ɵMatLegacyAutocomplete_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyAutocomplete)))(t || MatLegacyAutocomplete);\n      };\n    }();\n    static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatLegacyAutocomplete,\n      selectors: [[\"mat-autocomplete\"]],\n      contentQueries: function MatLegacyAutocomplete_ContentQueries(rf, ctx, dirIndex) {\n        if (rf & 1) {\n          i0.ɵɵcontentQuery(dirIndex, MAT_LEGACY_OPTGROUP, 5);\n          i0.ɵɵcontentQuery(dirIndex, MatLegacyOption, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.options = _t);\n        }\n      },\n      hostAttrs: [\"ngSkipHydration\", \"\", 1, \"mat-autocomplete\"],\n      inputs: {\n        disableRipple: \"disableRipple\"\n      },\n      exportAs: [\"matAutocomplete\"],\n      features: [i0.ɵɵProvidersFeature([{\n        provide: MAT_LEGACY_OPTION_PARENT_COMPONENT,\n        useExisting: MatLegacyAutocomplete\n      }]), i0.ɵɵInheritDefinitionFeature],\n      ngContentSelectors: _c0,\n      decls: 1,\n      vars: 0,\n      consts: [[\"role\", \"listbox\", 1, \"mat-autocomplete-panel\", 3, \"id\", \"ngClass\"], [\"panel\", \"\"]],\n      template: function MatLegacyAutocomplete_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef();\n          i0.ɵɵtemplate(0, MatLegacyAutocomplete_ng_template_0_Template, 3, 4, \"ng-template\");\n        }\n      },\n      dependencies: [i1.NgClass],\n      styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}mat-autocomplete{display:none}\"],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return MatLegacyAutocomplete;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n * @deprecated Use `MAT_AUTOCOMPLETE_VALUE_ACCESSOR` from `@angular/material/autocomplete` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nconst MAT_LEGACY_AUTOCOMPLETE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: /*#__PURE__*/forwardRef(() => MatLegacyAutocompleteTrigger),\n  multi: true\n};\n/**\n * @deprecated Use `MatAutocompleteTrigger` from `@angular/material/autocomplete` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nlet MatLegacyAutocompleteTrigger = /*#__PURE__*/(() => {\n  class MatLegacyAutocompleteTrigger extends _MatAutocompleteTriggerBase {\n    constructor() {\n      super(...arguments);\n      this._aboveClass = 'mat-autocomplete-panel-above';\n    }\n    static #_ = this.ɵfac = /* @__PURE__ */function () {\n      let ɵMatLegacyAutocompleteTrigger_BaseFactory;\n      return function MatLegacyAutocompleteTrigger_Factory(t) {\n        return (ɵMatLegacyAutocompleteTrigger_BaseFactory || (ɵMatLegacyAutocompleteTrigger_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyAutocompleteTrigger)))(t || MatLegacyAutocompleteTrigger);\n      };\n    }();\n    static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatLegacyAutocompleteTrigger,\n      selectors: [[\"input\", \"matAutocomplete\", \"\"], [\"textarea\", \"matAutocomplete\", \"\"]],\n      hostAttrs: [1, \"mat-autocomplete-trigger\"],\n      hostVars: 7,\n      hostBindings: function MatLegacyAutocompleteTrigger_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"focusin\", function MatLegacyAutocompleteTrigger_focusin_HostBindingHandler() {\n            return ctx._handleFocus();\n          })(\"blur\", function MatLegacyAutocompleteTrigger_blur_HostBindingHandler() {\n            return ctx._onTouched();\n          })(\"input\", function MatLegacyAutocompleteTrigger_input_HostBindingHandler($event) {\n            return ctx._handleInput($event);\n          })(\"keydown\", function MatLegacyAutocompleteTrigger_keydown_HostBindingHandler($event) {\n            return ctx._handleKeydown($event);\n          })(\"click\", function MatLegacyAutocompleteTrigger_click_HostBindingHandler() {\n            return ctx._handleClick();\n          });\n        }\n        if (rf & 2) {\n          i0.ɵɵattribute(\"autocomplete\", ctx.autocompleteAttribute)(\"role\", ctx.autocompleteDisabled ? null : \"combobox\")(\"aria-autocomplete\", ctx.autocompleteDisabled ? null : \"list\")(\"aria-activedescendant\", ctx.panelOpen && ctx.activeOption ? ctx.activeOption.id : null)(\"aria-expanded\", ctx.autocompleteDisabled ? null : ctx.panelOpen.toString())(\"aria-owns\", ctx.autocompleteDisabled || !ctx.panelOpen ? null : ctx.autocomplete == null ? null : ctx.autocomplete.id)(\"aria-haspopup\", ctx.autocompleteDisabled ? null : \"listbox\");\n        }\n      },\n      exportAs: [\"matAutocompleteTrigger\"],\n      features: [i0.ɵɵProvidersFeature([MAT_LEGACY_AUTOCOMPLETE_VALUE_ACCESSOR]), i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n  return MatLegacyAutocompleteTrigger;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n * @deprecated Use `MatAutocompleteOrigin` from `@angular/material/autocomplete` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nlet MatLegacyAutocompleteOrigin = /*#__PURE__*/(() => {\n  class MatLegacyAutocompleteOrigin extends _MatAutocompleteOriginBase {\n    static #_ = this.ɵfac = /* @__PURE__ */function () {\n      let ɵMatLegacyAutocompleteOrigin_BaseFactory;\n      return function MatLegacyAutocompleteOrigin_Factory(t) {\n        return (ɵMatLegacyAutocompleteOrigin_BaseFactory || (ɵMatLegacyAutocompleteOrigin_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyAutocompleteOrigin)))(t || MatLegacyAutocompleteOrigin);\n      };\n    }();\n    static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatLegacyAutocompleteOrigin,\n      selectors: [[\"\", \"matAutocompleteOrigin\", \"\"]],\n      exportAs: [\"matAutocompleteOrigin\"],\n      features: [i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n  return MatLegacyAutocompleteOrigin;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * @deprecated Use `MatAutocompleteModule` from `@angular/material/autocomplete` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nlet MatLegacyAutocompleteModule = /*#__PURE__*/(() => {\n  class MatLegacyAutocompleteModule {\n    static #_ = this.ɵfac = function MatLegacyAutocompleteModule_Factory(t) {\n      return new (t || MatLegacyAutocompleteModule)();\n    };\n    static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: MatLegacyAutocompleteModule\n    });\n    static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n      imports: [OverlayModule, MatLegacyOptionModule, MatCommonModule, CommonModule, CdkScrollableModule, MatLegacyOptionModule, MatCommonModule]\n    });\n  }\n  return MatLegacyAutocompleteModule;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_LEGACY_AUTOCOMPLETE_VALUE_ACCESSOR, MatLegacyAutocomplete, MatLegacyAutocompleteModule, MatLegacyAutocompleteOrigin, MatLegacyAutocompleteTrigger };\n//# sourceMappingURL=legacy-autocomplete.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}