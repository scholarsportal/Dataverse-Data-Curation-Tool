{"ast":null,"code":"import { ElementRef } from '@angular/core';\nimport * as d3 from 'd3';\nimport * as i0 from \"@angular/core\";\nconst _c0 = [\"chart\"];\nexport let ChartComponent = /*#__PURE__*/(() => {\n  class ChartComponent {\n    constructor() {\n      this.colorArray = ['#3366cc', '#dc3912', '#ff9900', '#109618', '#990099', '#0099c6', '#dd4477', '#66aa00', '#b82e2e', '#316395', '#994499', '#22aa99', '#aaaa11', '#6633cc', '#e67300', '#8b0707', '#651067', '#329262', '#5574a6', '#3b3eac', '#b77322', '#16d620', '#b91383', '#f4359e', '#9c5935', '#a9c413', '#2a778d', '#668d1c', '#bea413', '#0c5922', '#743411'];\n      this.maxStringLength = 13;\n    }\n    ngOnInit() {\n      this.createChart(this.data);\n    }\n    createChart(_data) {\n      const obj = this;\n      let data = this.data;\n      data = [];\n      for (let i = 0; i < _data.length; i++) {\n        let freq = null;\n        let freqWeight = null;\n        if (typeof _data[i].catStat !== 'undefined') {\n          for (let j = 0; j < _data[i].catStat.length; j++) {\n            const subObj = _data[i].catStat[j];\n            if (subObj['@type'] === 'freq' && !subObj['@wgtd']) {\n              freq = subObj['#text'];\n            } else {\n              if (subObj['@type'] === 'freq' && subObj['@wgtd'] && subObj['#text'] !== '') {\n                freqWeight = subObj['#text'];\n              }\n            }\n          }\n          // dataverse ddi exception\n          if (!freq) {\n            freq = _data[i].catStat['#text'];\n          }\n        }\n        let shortName = _data[i].labl['#text'];\n        if (shortName.length > this.maxStringLength) {\n          shortName = shortName.substring(0, this.maxStringLength) + '...';\n        }\n        shortName = shortName;\n        // switching to weighted frequencies\n        if (freqWeight != null) {\n          freq = freqWeight;\n        }\n        data.push({\n          name: shortName,\n          freq: freq\n        });\n      }\n      const maxHeight = (data.length + 1) * 25;\n      // sort based on catStat\n      data = data.sort(function (a, b) {\n        return a.catStat - b.catStat;\n      });\n      // set the dimensions and margins of the graph\n      const margin = {\n        top: 0,\n        right: 20,\n        bottom: 30,\n        left: 90\n      };\n      const width = 500 - margin.left - margin.right;\n      const height = maxHeight - margin.top - margin.bottom;\n      // set the ranges\n      const y = d3.scaleBand().range([height, 0]).padding(0.3);\n      const x = d3.scaleLinear().range([0, width]);\n      const element = this.chartContainer.nativeElement;\n      const svg = d3.select(element).append('svg').attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n      // format the data\n      data.forEach(d => {\n        d.freq = +d.freq;\n      });\n      // Scale the range of the data in the domains\n      x.domain([0, d3.max(data, d => {\n        return d.freq;\n      })]);\n      y.domain(data.map(d => {\n        return d.name;\n      }));\n      // append the rectangles for the bar chart\n      let count = 0;\n      svg.selectAll('.bar').data(data).enter().append('rect').attr('class', 'bar').attr('width', d => {\n        return x(d.freq);\n      }).attr('y', d => {\n        return y(d.name);\n      }).attr('fill', d => {\n        count += 1;\n        return obj.getColor(count);\n      }).attr('height', y.bandwidth());\n      // add the x Axis\n      svg.append('g').attr('transform', 'translate(0,' + height + ')').call(d3.axisBottom(x));\n      // add the y Axis\n      svg.append('g').call(d3.axisLeft(y));\n    }\n    getColor(num) {\n      let color = '';\n      if (num < this.colorArray.length) {\n        color = this.colorArray[num];\n      } else {\n        color = this.getRandomColor();\n      }\n      return color;\n    }\n    getRandomColor() {\n      const letters = '0123456789ABCDEF'.split('');\n      let color = '#';\n      for (let i = 0; i < 6; i++) {\n        color += letters[Math.floor(Math.random() * 16)];\n      }\n      return color;\n    }\n    static #_ = this.ɵfac = function ChartComponent_Factory(t) {\n      return new (t || ChartComponent)();\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ChartComponent,\n      selectors: [[\"app-chart\"]],\n      viewQuery: function ChartComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 7);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chartContainer = _t.first);\n        }\n      },\n      inputs: {\n        data: \"data\"\n      },\n      decls: 2,\n      vars: 0,\n      consts: [[\"chart\", \"\"]],\n      template: function ChartComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelement(0, \"div\", null, 0);\n        }\n      }\n    });\n  }\n  return ChartComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}