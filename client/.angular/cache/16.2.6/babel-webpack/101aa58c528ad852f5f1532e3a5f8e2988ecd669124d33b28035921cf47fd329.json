{"ast":null,"code":"import { ElementRef } from '@angular/core';\nimport { DdiService } from '../ddi.service';\nimport { xml2json } from '../../assets/js/xml2json';\nimport { MatLegacySnackBar as MatSnackBar } from '@angular/material/legacy-snack-bar';\nimport { VarComponent } from '../var/var.component';\nimport * as FileSaver from 'file-saver';\nimport * as XMLWriter from 'xml-writer';\nimport { TranslateService } from '@ngx-translate/core';\nimport { VarGroupComponent } from '../var-group/var-group.component';\nimport { MatomoTracker } from '@ngx-matomo/tracker';\nimport { ConfigService } from \"../config.service\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../ddi.service\";\nimport * as i2 from \"@angular/material/legacy-snack-bar\";\nimport * as i3 from \"@ngx-matomo/tracker\";\nimport * as i4 from \"@ngx-translate/core\";\nimport * as i5 from \"../config.service\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"@angular/forms\";\nimport * as i8 from \"@angular/material/legacy-button\";\nimport * as i9 from \"@angular/material/icon\";\nimport * as i10 from \"@angular/material/toolbar\";\nimport * as i11 from \"@angular/material/legacy-progress-spinner\";\nimport * as i12 from \"@angular/material/legacy-form-field\";\nimport * as i13 from \"@angular/material/legacy-input\";\nimport * as i14 from \"@angular/material/sidenav\";\nimport * as i15 from \"../var-group/var-group.component\";\nimport * as i16 from \"../var/var.component\";\nconst _c0 = [\"scrollMe\"];\nfunction InterfaceComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 24);\n    i0.ɵɵelement(1, \"mat-progress-spinner\", 25);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction InterfaceComponent_option_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 26);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const lang_r8 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"value\", lang_r8)(\"selected\", lang_r8 === ctx_r2.translate.currentLang);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(lang_r8);\n  }\n}\nfunction InterfaceComponent_ng_container_21_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"button\", 16);\n    i0.ɵɵlistener(\"click\", function InterfaceComponent_ng_container_21_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r10);\n      i0.ɵɵnextContext();\n      const _r6 = i0.ɵɵreference(45);\n      return i0.ɵɵresetView(_r6.toggle());\n    });\n    i0.ɵɵelementStart(2, \"mat-icon\", 17);\n    i0.ɵɵpipe(3, \"translate\");\n    i0.ɵɵtext(4, \"keyboard_arrow_left\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"span\", 18);\n    i0.ɵɵtext(6);\n    i0.ɵɵpipe(7, \"translate\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(2);\n    i0.ɵɵattribute(\"aria-label\", i0.ɵɵpipeBind1(3, 2, \"GROUPS.HIDE\"));\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(7, 4, \"GROUPS.HIDE\"));\n  }\n}\nfunction InterfaceComponent_ng_template_22_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 16);\n    i0.ɵɵlistener(\"click\", function InterfaceComponent_ng_template_22_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r12);\n      i0.ɵɵnextContext();\n      const _r6 = i0.ɵɵreference(45);\n      return i0.ɵɵresetView(_r6.toggle());\n    });\n    i0.ɵɵelementStart(1, \"mat-icon\", 17);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵtext(3, \"keyboard_arrow_right\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"span\", 18);\n    i0.ɵɵtext(5);\n    i0.ɵɵpipe(6, \"translate\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"aria-label\", i0.ɵɵpipeBind1(2, 2, \"GROUPS.SHOW\"));\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(6, 4, \"GROUPS.SHOW\"));\n  }\n}\nexport let InterfaceComponent = /*#__PURE__*/(() => {\n  class InterfaceComponent {\n    constructor(ddiService, snackBar, tracker, translatePar, config) {\n      this.ddiService = ddiService;\n      this.snackBar = snackBar;\n      this.tracker = tracker;\n      this.translatePar = translatePar;\n      this.config = config;\n      this.data = null; // store the xml\n      this.ddiLoaded = false; // show the loading\n      this.variableGroups = []; // store the variables in an array display\n      this._variables = []; // store the variables to be broadcast to child\n      this._id = null; // file id\n      this.metaId = null;\n      this.baseUrl = null;\n      this.siteUrl = null;\n      this.dvLocale = null;\n      this.tracker.trackPageView();\n      this.translate = translatePar;\n      this.translate.addLangs(['English', 'Français', 'Português']);\n      this.translate.setDefaultLang('English');\n      const browserLang = this.translate.getBrowserLang();\n      this.translate.use(browserLang.match(/English|Français|Português/) ? browserLang : 'English');\n    }\n    doSomething($event) {\n      console.log(this.child.varChange + \" \" + this.childGroups.groupChange);\n      if (this.child.varChange === true || this.childGroups.groupChange === true) {\n        $event.returnValue = 'You have unsaved changes - are you sure you want to exit?';\n        return $event.returnValue;\n      }\n    }\n    ngOnInit() {\n      let uri = null;\n      this.siteUrl = this.ddiService.getParameterByName('siteUrl');\n      this.baseUrl = this.ddiService.getBaseUrl();\n      this._id = this.ddiService.getParameterByName('dfId');\n      this.metaId = this.ddiService.getParameterByName('fileMetadataId');\n      this.dvLocale = this.ddiService.getParameterByName('dvLocale');\n      if (this.dvLocale != null) {\n        if (this.dvLocale === 'en') {\n          this.translate.use('English');\n        } else if (this.dvLocale === 'fr') {\n          this.translate.use('Français');\n        } else {\n          const browserLang = this.translate.getBrowserLang();\n          this.translate.use(browserLang.match(/English|Français|Português/) ? browserLang : 'English');\n        }\n      } else {\n        const browserLang = this.translate.getBrowserLang();\n        this.translate.use(browserLang.match(/English|Français|Português/) ? browserLang : 'English');\n      }\n      if (!this.siteUrl && this._id != null) {\n        uri = this.baseUrl + '/api/access/datafile/' + this._id + '/metadata/ddi';\n        if (this.metaId != null) {\n          uri = uri + '?fileMetadataId=' + this.metaId;\n        }\n      } else {\n        if (this.siteUrl) {\n          uri = this.siteUrl + '/api/access/datafile/' + this._id + '/metadata/ddi';\n          if (this.metaId != null) {\n            uri = uri + '?fileMetadataId=' + this.metaId;\n          }\n        } else {\n          // Just for testing purposes\n          uri = this.baseUrl + '/assets/FOCN_SPSS_20150525_FORMATTED-ddi.xml';\n        }\n      }\n      this.getDDI(uri);\n      // this.translate.getLangs();\n    }\n\n    getDDI(_uri) {\n      const url = _uri;\n      this.ddiService.getDDI(url).subscribe(data => this.processDDI(data), error => console.log(error), () => this.completeDDI());\n    }\n    scrollNav() {\n      const elm = this.myScrollContainer['_elementRef'].nativeElement;\n      elm.scrollTop = elm.scrollHeight;\n    }\n    processDDI(data) {\n      const parser = new DOMParser();\n      this.data = parser.parseFromString(data, 'text/xml');\n    }\n    completeDDI() {\n      this.showVarsGroups();\n      this.showVars();\n      this.title = this.data.getElementsByTagName('stdyDscr')[0].getElementsByTagName('titl')[0].textContent;\n      const citation = this.data.getElementsByTagName('stdyDscr')[0].getElementsByTagName('biblCit')[0].textContent;\n      const start = citation.indexOf('http');\n      const temp = citation.substr(start);\n      const end = temp.indexOf(',');\n      this.doi = temp.substr(0, end);\n      this.firstCitat = citation.substr(0, start);\n      this.firstCitat = this.firstCitat;\n      this.secondCitat = temp.substr(end);\n      this.secondCitat = this.secondCitat;\n      this.filename = this.data.getElementsByTagName('fileDscr')[0].getElementsByTagName('fileName')[0].textContent;\n      this.showDDI();\n      const agency = this.data.getElementsByTagName('IDNo')[0];\n      const obj = JSON.parse(xml2json(agency, ''));\n    }\n    showVarsGroups() {\n      const elm = this.data.getElementsByTagName('varGrp');\n      for (const elmIn of elm) {\n        const obj = JSON.parse(xml2json(elmIn, ''));\n        if (typeof obj.varGrp['@var'] === 'undefined') {\n          obj.varGrp['@var'] = '';\n        }\n        this.variableGroups.push(obj);\n      }\n    }\n    showVars() {\n      const variables = [];\n      const elm = this.data.getElementsByTagName('var');\n      for (const elm_in of elm) {\n        variables.push(JSON.parse(xml2json(elm_in, '')));\n      }\n      // flatten the table structure so it can be sorted/filtered appropriately\n      const flat_array = [];\n      for (let i = 0; i < variables.length; i++) {\n        const obj = variables[i];\n        // make equivalent variable to allow sorting\n        for (const j in obj.var) {\n          if (j.indexOf('@') === 0) {\n            obj.var[j.substring(1).toLowerCase()] = obj.var[j];\n          }\n        }\n        if (typeof obj.var.catgry !== 'undefined') {\n          if (typeof obj.var.catgry.length === 'undefined') {\n            // If there is only one category\n            obj.var.catgry = [obj.var.catgry];\n          }\n          let sumCount = 0;\n          for (let k = 0; k < obj.var.catgry.length; k++) {\n            if (typeof obj.var.catgry[k].catStat !== 'undefined') {\n              if (typeof obj.var.catgry[k].catStat.length === 'undefined') {\n                obj.var.catgry[k].catStat = [obj.var.catgry[k].catStat];\n              }\n              // tslint:disable-next-line:radix\n              sumCount = sumCount + parseInt(obj.var.catgry[k].catStat[0]['#text']);\n            }\n          }\n          for (let k = 0; k < obj.var.catgry.length; k++) {\n            if (typeof obj.var.catgry[k].catStat !== 'undefined') {\n              // tslint:disable-next-line:radix\n              obj.var.catgry[k].countPerc = parseInt(obj.var.catgry[k].catStat[0]['#text']) * 100 / sumCount;\n            }\n          }\n          obj.var.sumCount = sumCount;\n        }\n        if (typeof obj.var.universe !== 'undefined') {\n          if (typeof obj.var.universe.size === 'undefined') {\n            obj.var.universe = {\n              '#text': obj.var.universe\n            };\n          }\n        }\n        if (typeof obj.var.notes !== 'undefined') {\n          if (typeof obj.var.notes.length !== undefined && obj.var.notes.length === 2) {\n            obj.var.notes = {\n              '#cdata': obj.var.notes[1]['#cdata'],\n              '#text': obj.var.notes[0]['#text'],\n              '@level': obj.var.notes[0]['@level'],\n              '@subject': obj.var.notes[0]['@subject'],\n              '@type': obj.var.notes[0]['@type']\n            };\n          }\n        }\n        flat_array.push(obj.var);\n      }\n      this._variables = flat_array;\n      this.child.onUpdateVars(this._variables);\n    }\n    // pass the selected ids to the var table for display\n    broadcastSubSetRows(ids) {\n      this.child.onSubset(ids);\n    }\n    broadcastSelect(_id) {\n      // set the var table header to show the selection\n      this.child.selectGroup(_id);\n    }\n    broadcastDeselectGroup() {\n      this.child.disableSelectGroup();\n    }\n    showDDI() {\n      this.ddiLoaded = true;\n    }\n    // Create the XML File\n    makeXML(dv) {\n      const doc = new XMLWriter();\n      doc.startDocument();\n      doc.startElement('codeBook');\n      const codeBook = this.data.getElementsByTagName('codeBook')[0];\n      const obj = JSON.parse(xml2json(codeBook, ''));\n      doc.writeAttribute('xmlns', obj.codeBook['@xmlns']);\n      doc.writeAttribute('version', obj.codeBook['@version']);\n      if (dv === false) {\n        this.addStdyDscr(doc);\n        this.addFileDscr(doc);\n      }\n      doc.startElement('dataDscr');\n      // add groups\n      for (const group of this.variableGroups) {\n        if (group.varGrp.labl !== null && group.varGrp.labl.trim() !== '') {\n          doc.startElement('varGrp');\n          doc.writeAttribute('ID', group.varGrp['@ID']);\n          doc.writeAttribute('var', group.varGrp['@var']);\n          doc.startElement('labl');\n          doc.text(group.varGrp.labl);\n          doc.endElement();\n          doc.endElement();\n        }\n      }\n      // add variables\n      for (let i = 0; i < this._variables.length; i++) {\n        // start variable (var)\n        doc.startElement('var');\n        doc.writeAttribute('ID', this._variables[i]['@ID']);\n        doc.writeAttribute('name', this._variables[i]['@name']);\n        if (typeof this._variables[i]['@intrvl'] !== 'undefined') {\n          doc.writeAttribute('intrvl', this._variables[i]['@intrvl']);\n        }\n        if (typeof this._variables[i]['@wgt'] !== 'undefined' && this._variables[i]['@wgt'] !== '') {\n          doc.writeAttribute('wgt', this._variables[i]['@wgt']);\n        }\n        if (typeof this._variables[i]['@wgt-var'] !== 'undefined' && this._variables[i]['@wgt-var'] !== '') {\n          doc.writeAttribute('wgt-var', this._variables[i]['@wgt-var']);\n        }\n        // start location\n        if (typeof this._variables[i].location !== 'undefined') {\n          doc.startElement('location').writeAttribute('fileid', this._variables[i].location['@fileid']);\n          doc.endElement();\n        }\n        // end location\n        // start labl\n        if (typeof this._variables[i].labl !== 'undefined') {\n          doc.startElement('labl');\n          doc.writeAttribute('level', this._variables[i].labl['@level']);\n          doc.text(this._variables[i].labl['#text']);\n          doc.endElement();\n        }\n        // end labl\n        // start sumStat\n        if (typeof this._variables[i].sumStat !== 'undefined') {\n          if (typeof this._variables[i].sumStat.length !== 'undefined') {\n            for (let j = 0; j < this._variables[i].sumStat.length; j++) {\n              doc.startElement('sumStat');\n              doc.writeAttribute('type', this._variables[i].sumStat[j]['@type']);\n              doc.text(this._variables[i].sumStat[j]['#text']);\n              doc.endElement();\n            }\n          }\n        }\n        // end sumStat\n        // start catgry\n        if (typeof this._variables[i].catgry !== 'undefined') {\n          if (typeof this._variables[i].catgry.length !== 'undefined') {\n            for (let j = 0; j < this._variables[i].catgry.length; j++) {\n              doc.startElement('catgry');\n              if (typeof this._variables[i].catgry[j].catValu !== 'undefined') {\n                doc.startElement('catValu').text(this._variables[i].catgry[j].catValu);\n                doc.endElement();\n              }\n              if (typeof this._variables[i].catgry[j].labl !== 'undefined') {\n                doc.startElement('labl');\n                doc.writeAttribute('level', this._variables[i].catgry[j].labl['@level']);\n                doc.text(this._variables[i].catgry[j].labl['#text']);\n                doc.endElement();\n              }\n              if (typeof this._variables[i].catgry[j].catStat !== 'undefined') {\n                // frequency\n                if (typeof this._variables[i].catgry[j].catStat.length !== 'undefined') {\n                  doc.startElement('catStat');\n                  doc.writeAttribute('type', this._variables[i].catgry[j].catStat[0]['@type']);\n                  doc.text(this._variables[i].catgry[j].catStat[0]['#text']);\n                  doc.endElement();\n                  // weighted frequency\n                  if (this._variables[i].catgry[j].catStat.length > 1) {\n                    doc.startElement('catStat');\n                    doc.writeAttribute('wgtd', this._variables[i].catgry[j].catStat[1]['@wgtd']);\n                    doc.writeAttribute('type', this._variables[i].catgry[j].catStat[1]['@type']);\n                    doc.text(this._variables[i].catgry[j].catStat[1]['#text']);\n                    doc.endElement();\n                  }\n                }\n              }\n              doc.endElement();\n            }\n          }\n        }\n        // end catgry\n        // start qstn\n        if (typeof this._variables[i].qstn !== 'undefined' && (typeof this._variables[i].qstn.qstnLit !== 'undefined' && this._variables[i].qstn.qstnLit !== '' || typeof this._variables[i].qstn.ivuInstr !== 'undefined' && this._variables[i].qstn.ivuInstr !== '' || typeof this._variables[i].qstn.postQTxt !== 'undefined' && this._variables[i].qstn.postQTxt !== '')) {\n          doc.startElement('qstn');\n          if (typeof this._variables[i].qstn.qstnLit !== 'undefined') {\n            doc.startElement('qstnLit').text(this._variables[i].qstn.qstnLit);\n            doc.endElement();\n          }\n          if (typeof this._variables[i].qstn.ivuInstr !== 'undefined') {\n            doc.startElement('ivuInstr').text(this._variables[i].qstn.ivuInstr);\n            doc.endElement();\n          }\n          if (typeof this._variables[i].qstn.postQTxt !== 'undefined') {\n            doc.startElement('postQTxt').text(this._variables[i].qstn.postQTxt);\n            doc.endElement();\n          }\n          doc.endElement();\n        }\n        // end qstn\n        // start varFormat\n        if (typeof this._variables[i].varFormat !== 'undefined') {\n          doc.startElement('varFormat');\n          doc.writeAttribute('type', this._variables[i].varFormat['@type']);\n          doc.endElement();\n        }\n        // end varFormat\n        // start notes\n        if (typeof this._variables[i].notes !== 'undefined') {\n          // start notes cdata\n          if (typeof this._variables[i].notes['#cdata'] !== 'undefined' && this._variables[i].notes['#cdata'] !== '') {\n            doc.startElement('notes');\n            doc.startCData();\n            doc.writeCData(this._variables[i].notes['#cdata']);\n            doc.endCData();\n            doc.endElement();\n          }\n          // end notes cdata\n          doc.startElement('notes');\n          doc.writeAttribute('subject', this._variables[i].notes['@subject']);\n          doc.writeAttribute('level', this._variables[i].notes['@level']);\n          doc.writeAttribute('type', this._variables[i].notes['@type']);\n          doc.text(this._variables[i].notes['#text']);\n          doc.endElement();\n        }\n        // end notes\n        // start universe\n        if (typeof this._variables[i].universe !== 'undefined' && this._variables[i].universe['#text'] !== '') {\n          doc.startElement('universe');\n          doc.text(this._variables[i].universe['#text']);\n          doc.endElement();\n        }\n        // end universe\n        // end variable (var)\n        doc.endElement();\n      }\n      doc.endElement();\n      doc.endDocument();\n      return doc;\n    }\n    addStdyDscr(doc) {\n      doc.startElement('stdyDscr');\n      doc.startElement('citation');\n      doc.startElement('titlStmt');\n      const titl = this.data.getElementsByTagName('titl')[0].textContent;\n      doc.startElement('titl').text(titl);\n      doc.endElement(); // end titl\n      doc.startElement('IDNo');\n      const agency = this.data.getElementsByTagName('IDNo')[0];\n      const obj = JSON.parse(xml2json(agency, ''));\n      doc.writeAttribute('agency', obj.IDNo['@agency']).text(obj.IDNo['#text']);\n      doc.endElement('IDNo'); // end IDNo\n      doc.endElement(); // end titlStmt\n      doc.startElement('rspStmt');\n      const AuthEnty = this.data.getElementsByTagName('AuthEnty')[0].textContent;\n      doc.startElement('AuthEnty').text(AuthEnty);\n      doc.endElement(); // end AuthEnty\n      doc.endElement(); // end rspStmt\n      const biblCit = this.data.getElementsByTagName('biblCit')[0].textContent;\n      doc.startElement('biblCit').text(biblCit);\n      doc.endElement(); // biblCit\n      doc.endElement(); // end citation\n      doc.endElement(); // end stdyDscr\n    }\n\n    addFileDscr(doc) {\n      doc.startElement('fileDscr');\n      const fileDscr = this.data.getElementsByTagName('fileDscr')[0];\n      const obj = JSON.parse(xml2json(fileDscr, ''));\n      doc.writeAttribute('ID', obj.fileDscr['@ID']);\n      doc.startElement('fileTxt');\n      const fileName = this.data.getElementsByTagName('fileName')[0].textContent;\n      doc.startElement('fileName').text(fileName);\n      doc.endElement(); // end fileName\n      doc.startElement('dimensns');\n      doc.startElement('caseQnty').text(obj.fileDscr.fileTxt.dimensns.caseQnty);\n      doc.endElement(); // end caseQnty\n      doc.startElement('varQnty').text(obj.fileDscr.fileTxt.dimensns.varQnty);\n      doc.endElement(); // end varQnty\n      doc.endElement(); // end dimensns\n      doc.startElement('fileType').text(obj.fileDscr.fileTxt.fileType);\n      doc.endElement(); // fileType\n      doc.endElement(); // fileTxt\n      const notes = fileDscr.getElementsByTagName('notes');\n      console.log(notes);\n      for (const note of notes) {\n        const newNote = JSON.parse(xml2json(note, ''));\n        console.log(newNote);\n        doc.startElement('notes');\n        doc.writeAttribute('level', newNote.notes['@level']);\n        doc.writeAttribute('type', newNote.notes['@type']);\n        doc.writeAttribute('subject', newNote.notes['@subject']);\n        doc.text(newNote.notes['#text']);\n        doc.endElement(); // end notes\n      }\n\n      doc.endElement(); // end fileDscr\n    }\n    // Save the XML file locally\n    onSave() {\n      const dv = false;\n      const doc = this.makeXML(dv);\n      const text = new Blob([doc.toString()], {\n        type: 'application/xml'\n      });\n      const tl = this.title + '.xml';\n      FileSaver.saveAs(text, 'dct.xml');\n    }\n    // Send the XML to Dataverse\n    sendToDV() {\n      const key = this.ddiService.getParameterByName('key');\n      const dv = true;\n      const doc = this.makeXML(dv);\n      let url = null;\n      if (key !== null) {\n        if (this.siteUrl !== null) {\n          url = this.siteUrl + '/api/edit/' + this._id; // + \"/\" + this.metaId;\n        } else {\n          url = this.baseUrl + '/api/edit/' + this._id;\n        }\n        this.ddiService.putDDI(url, doc.toString(), key).subscribe(data => {\n          console.log('Data ');\n          console.log(data);\n        }, error => {\n          this.snackBar.open(this.translate.instant('SAVE.CANNOT') + error, '', {\n            duration: 2000\n          });\n          console.log('Error');\n          console.log(error);\n        }, () => {\n          // console.log('Ok');\n          this.snackBar.open(this.translate.instant('SAVE.SAVED'), '', {\n            duration: 2000\n          });\n          this.child.varChange = false;\n          this.childGroups.groupChange = false;\n        });\n      } else {\n        this.snackBar.open(this.translate.instant('SAVE.MISSAPI'), '', {\n          duration: 2000\n        });\n        console.log('API Key missing');\n      }\n    }\n    static #_ = this.ɵfac = function InterfaceComponent_Factory(t) {\n      return new (t || InterfaceComponent)(i0.ɵɵdirectiveInject(i1.DdiService), i0.ɵɵdirectiveInject(i2.MatLegacySnackBar), i0.ɵɵdirectiveInject(i3.MatomoTracker), i0.ɵɵdirectiveInject(i4.TranslateService), i0.ɵɵdirectiveInject(i5.ConfigService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: InterfaceComponent,\n      selectors: [[\"app-interface\"]],\n      viewQuery: function InterfaceComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(VarComponent, 7);\n          i0.ɵɵviewQuery(VarGroupComponent, 7);\n          i0.ɵɵviewQuery(_c0, 7);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.child = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.childGroups = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.myScrollContainer = _t.first);\n        }\n      },\n      hostBindings: function InterfaceComponent_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"beforeunload\", function InterfaceComponent_beforeunload_HostBindingHandler($event) {\n            return ctx.doSomething($event);\n          }, false, i0.ɵɵresolveWindow);\n        }\n      },\n      decls: 50,\n      vars: 30,\n      consts: [[\"id\", \"loading-details\", \"class\", \"row content-area\", 4, \"ngIf\"], [1, \"interface-container\"], [1, \"interface-header\"], [1, \"header-text\", \"title\"], [1, \"fill-space\"], [1, \"lang-select\"], [\"matNativeControl\", \"\", \"title\", \"Language\", 3, \"change\"], [\"langSelect\", \"\"], [3, \"value\", \"selected\", 4, \"ngFor\", \"ngForOf\"], [1, \"header-text\"], [1, \"header-text\", \"citation\"], [3, \"href\"], [1, \"groups-toggle\"], [4, \"ngIf\", \"ngIfElse\"], [\"showGroups\", \"\"], [1, \"action-buttons\"], [\"mat-button\", \"\", 3, \"click\"], [\"color\", \"accent\"], [1, \"button-label\"], [1, \"group-container\"], [\"mode\", \"side\", \"opened\", \"\", 1, \"side_nav\"], [\"sidenav\", \"\", \"scrollMe\", \"\"], [3, \"variableGroups\", \"subSetRows\", \"selectGroup\", \"disableSelectGroup\", \"parentScrollNav\"], [3, \"variableGroups\"], [\"id\", \"loading-details\", 1, \"row\", \"content-area\"], [\"mode\", \"indeterminate\"], [3, \"value\", \"selected\"]],\n      template: function InterfaceComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          const _r13 = i0.ɵɵgetCurrentView();\n          i0.ɵɵtemplate(0, InterfaceComponent_div_0_Template, 2, 0, \"div\", 0);\n          i0.ɵɵelementContainerStart(1, 1);\n          i0.ɵɵelementStart(2, \"mat-toolbar\", 2)(3, \"mat-toolbar-row\")(4, \"h1\", 3);\n          i0.ɵɵtext(5);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(6, \"span\", 4);\n          i0.ɵɵelementStart(7, \"mat-form-field\", 5)(8, \"select\", 6, 7);\n          i0.ɵɵlistener(\"change\", function InterfaceComponent_Template_select_change_8_listener() {\n            i0.ɵɵrestoreView(_r13);\n            const _r1 = i0.ɵɵreference(9);\n            return i0.ɵɵresetView(ctx.translate.use(_r1.value));\n          });\n          i0.ɵɵtemplate(10, InterfaceComponent_option_10_Template, 2, 3, \"option\", 8);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(11, \"mat-toolbar-row\", 9);\n          i0.ɵɵtext(12);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(13, \"mat-toolbar-row\", 10)(14, \"span\");\n          i0.ɵɵtext(15);\n          i0.ɵɵelementStart(16, \"a\", 11);\n          i0.ɵɵtext(17);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(18);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(19, \"mat-toolbar-row\")(20, \"span\", 12);\n          i0.ɵɵtemplate(21, InterfaceComponent_ng_container_21_Template, 8, 6, \"ng-container\", 13);\n          i0.ɵɵtemplate(22, InterfaceComponent_ng_template_22_Template, 7, 6, \"ng-template\", null, 14, i0.ɵɵtemplateRefExtractor);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(24, \"span\", 4);\n          i0.ɵɵelementStart(25, \"span\", 15)(26, \"button\", 16);\n          i0.ɵɵlistener(\"click\", function InterfaceComponent_Template_button_click_26_listener() {\n            return ctx.onSave();\n          });\n          i0.ɵɵelementStart(27, \"mat-icon\", 17);\n          i0.ɵɵpipe(28, \"translate\");\n          i0.ɵɵpipe(29, \"translate\");\n          i0.ɵɵtext(30, \"get_app\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(31, \"span\", 18);\n          i0.ɵɵtext(32);\n          i0.ɵɵpipe(33, \"translate\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(34, \"span\", 15)(35, \"button\", 16);\n          i0.ɵɵlistener(\"click\", function InterfaceComponent_Template_button_click_35_listener() {\n            return ctx.sendToDV();\n          });\n          i0.ɵɵelementStart(36, \"mat-icon\", 17);\n          i0.ɵɵpipe(37, \"translate\");\n          i0.ɵɵpipe(38, \"translate\");\n          i0.ɵɵtext(39, \"save\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(40, \"span\", 18);\n          i0.ɵɵtext(41);\n          i0.ɵɵpipe(42, \"translate\");\n          i0.ɵɵelementEnd()()()()();\n          i0.ɵɵelementStart(43, \"mat-sidenav-container\", 19)(44, \"mat-sidenav\", 20, 21)(47, \"app-var-group\", 22);\n          i0.ɵɵlistener(\"subSetRows\", function InterfaceComponent_Template_app_var_group_subSetRows_47_listener($event) {\n            return ctx.broadcastSubSetRows($event);\n          })(\"selectGroup\", function InterfaceComponent_Template_app_var_group_selectGroup_47_listener($event) {\n            return ctx.broadcastSelect($event);\n          })(\"disableSelectGroup\", function InterfaceComponent_Template_app_var_group_disableSelectGroup_47_listener() {\n            return ctx.broadcastDeselectGroup();\n          })(\"parentScrollNav\", function InterfaceComponent_Template_app_var_group_parentScrollNav_47_listener() {\n            return ctx.scrollNav();\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(48, \"mat-sidenav-content\");\n          i0.ɵɵelement(49, \"app-var\", 23);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementContainerEnd();\n        }\n        if (rf & 2) {\n          const _r4 = i0.ɵɵreference(23);\n          const _r6 = i0.ɵɵreference(45);\n          i0.ɵɵproperty(\"ngIf\", !ctx.ddiLoaded);\n          i0.ɵɵadvance(5);\n          i0.ɵɵtextInterpolate(ctx.title);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngForOf\", ctx.translate.getLangs());\n          i0.ɵɵadvance(2);\n          i0.ɵɵtextInterpolate1(\" \", ctx.filename, \" \");\n          i0.ɵɵadvance(3);\n          i0.ɵɵtextInterpolate(ctx.firstCitat);\n          i0.ɵɵadvance(1);\n          i0.ɵɵpropertyInterpolate(\"href\", ctx.doi, i0.ɵɵsanitizeUrl);\n          i0.ɵɵadvance(1);\n          i0.ɵɵtextInterpolate(ctx.doi);\n          i0.ɵɵadvance(1);\n          i0.ɵɵtextInterpolate(ctx.secondCitat);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", _r6.opened)(\"ngIfElse\", _r4);\n          i0.ɵɵadvance(6);\n          i0.ɵɵattribute(\"aria-label\", i0.ɵɵpipeBind1(28, 18, \"SAVE.DOWNLOAD\"))(\"matTooltip\", i0.ɵɵpipeBind1(29, 20, \"SAVE.DOWNLOAD\"));\n          i0.ɵɵadvance(5);\n          i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(33, 22, \"SAVE.DOWNLOAD\"));\n          i0.ɵɵadvance(4);\n          i0.ɵɵattribute(\"aria-label\", i0.ɵɵpipeBind1(37, 24, \"SAVE.SAVE\"))(\"matTooltip\", i0.ɵɵpipeBind1(38, 26, \"SAVE.SAVE\"));\n          i0.ɵɵadvance(5);\n          i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(42, 28, \"SAVE.SAVE\"));\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"variableGroups\", ctx.variableGroups);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"variableGroups\", ctx.variableGroups);\n        }\n      },\n      dependencies: [i6.NgForOf, i6.NgIf, i7.NgSelectOption, i7.ɵNgSelectMultipleOption, i8.MatLegacyButton, i9.MatIcon, i10.MatToolbar, i10.MatToolbarRow, i11.MatLegacyProgressSpinner, i12.MatLegacyFormField, i13.MatLegacyInput, i14.MatSidenav, i14.MatSidenavContainer, i14.MatSidenavContent, i15.VarGroupComponent, i16.VarComponent, i4.TranslatePipe],\n      styles: [\".interface-header[_ngcontent-%COMP%]{padding-top:.8em;border-bottom:solid 1px rgba(0,0,0,.12)}.mat-form-field.lang-select[_ngcontent-%COMP%]{font-size:.6em;width:7em}.mat-toolbar-row[_ngcontent-%COMP%], .mat-toolbar-single-row[_ngcontent-%COMP%]{min-height:40px;height:auto}.header-text[_ngcontent-%COMP%]{height:auto;font-size:.7em;font-weight:400;white-space:normal;padding-bottom:10px;line-height:1.1em}.header-text.title[_ngcontent-%COMP%]{font-size:1.1em;font-weight:500}.action-buttons[_ngcontent-%COMP%]{float:right;font-size:.7em}.button-label[_ngcontent-%COMP%]{padding:.3em}.groups-toggle[_ngcontent-%COMP%]{font-size:.7em}.group-container[_ngcontent-%COMP%]{min-height:100vh}\"]\n    });\n  }\n  return InterfaceComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}