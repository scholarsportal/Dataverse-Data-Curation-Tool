{"ast":null,"code":"import * as i1$2 from '@angular/cdk/overlay';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport * as i1$1 from '@angular/cdk/portal';\nimport { PortalModule } from '@angular/cdk/portal';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, NgModule, Injectable, Optional, SkipSelf } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i3 from '@angular/material/legacy-button';\nimport { MatLegacyButtonModule } from '@angular/material/legacy-button';\nimport * as i1 from '@angular/material/snack-bar';\nimport { MAT_SNACK_BAR_DATA, _MatSnackBarContainerBase, matSnackBarAnimations, _MatSnackBarBase, MAT_SNACK_BAR_DEFAULT_OPTIONS } from '@angular/material/snack-bar';\nexport { MAT_SNACK_BAR_DATA as MAT_LEGACY_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS as MAT_LEGACY_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY as MAT_LEGACY_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBarConfig as MatLegacySnackBarConfig, MatSnackBarRef as MatLegacySnackBarRef, _MatSnackBarBase as _MatLegacySnackBarBase, _MatSnackBarContainerBase as _MatLegacySnackBarContainerBase, matSnackBarAnimations as matLegacySnackBarAnimations } from '@angular/material/snack-bar';\nimport * as i2$1 from '@angular/cdk/a11y';\nimport * as i3$1 from '@angular/cdk/layout';\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n * @deprecated Use `SimpleSnackBar` from `@angular/material/snack-bar` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nfunction LegacySimpleSnackBar_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 2)(1, \"button\", 3);\n    i0.ɵɵlistener(\"click\", function LegacySimpleSnackBar_div_2_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.action());\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.data.action);\n  }\n}\nfunction MatLegacySnackBarContainer_ng_template_1_Template(rf, ctx) {}\nlet LegacySimpleSnackBar = /*#__PURE__*/(() => {\n  class LegacySimpleSnackBar {\n    constructor(snackBarRef, data) {\n      this.snackBarRef = snackBarRef;\n      this.data = data;\n    }\n    /** Performs the action on the snack bar. */\n    action() {\n      this.snackBarRef.dismissWithAction();\n    }\n    /** If the action button should be shown. */\n    get hasAction() {\n      return !!this.data.action;\n    }\n    static #_ = this.ɵfac = function LegacySimpleSnackBar_Factory(t) {\n      return new (t || LegacySimpleSnackBar)(i0.ɵɵdirectiveInject(i1.MatSnackBarRef), i0.ɵɵdirectiveInject(MAT_SNACK_BAR_DATA));\n    };\n    static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: LegacySimpleSnackBar,\n      selectors: [[\"simple-snack-bar\"]],\n      hostAttrs: [1, \"mat-simple-snackbar\"],\n      decls: 3,\n      vars: 2,\n      consts: [[1, \"mat-simple-snack-bar-content\"], [\"class\", \"mat-simple-snackbar-action\", 4, \"ngIf\"], [1, \"mat-simple-snackbar-action\"], [\"mat-button\", \"\", 3, \"click\"]],\n      template: function LegacySimpleSnackBar_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"span\", 0);\n          i0.ɵɵtext(1);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(2, LegacySimpleSnackBar_div_2_Template, 3, 1, \"div\", 1);\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(1);\n          i0.ɵɵtextInterpolate(ctx.data.message);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.hasAction);\n        }\n      },\n      dependencies: [i2.NgIf, i3.MatLegacyButton],\n      styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}.mat-simple-snack-bar-content{overflow:hidden;text-overflow:ellipsis}\"],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return LegacySimpleSnackBar;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n * @deprecated Use `MatSnackBarContainer` from `@angular/material/snack-bar` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nlet MatLegacySnackBarContainer = /*#__PURE__*/(() => {\n  class MatLegacySnackBarContainer extends _MatSnackBarContainerBase {\n    _afterPortalAttached() {\n      super._afterPortalAttached();\n      if (this.snackBarConfig.horizontalPosition === 'center') {\n        this._elementRef.nativeElement.classList.add('mat-snack-bar-center');\n      }\n      if (this.snackBarConfig.verticalPosition === 'top') {\n        this._elementRef.nativeElement.classList.add('mat-snack-bar-top');\n      }\n    }\n    static #_ = this.ɵfac = /* @__PURE__ */function () {\n      let ɵMatLegacySnackBarContainer_BaseFactory;\n      return function MatLegacySnackBarContainer_Factory(t) {\n        return (ɵMatLegacySnackBarContainer_BaseFactory || (ɵMatLegacySnackBarContainer_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacySnackBarContainer)))(t || MatLegacySnackBarContainer);\n      };\n    }();\n    static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatLegacySnackBarContainer,\n      selectors: [[\"snack-bar-container\"]],\n      hostAttrs: [1, \"mat-snack-bar-container\"],\n      hostVars: 1,\n      hostBindings: function MatLegacySnackBarContainer_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵsyntheticHostListener(\"@state.done\", function MatLegacySnackBarContainer_animation_state_done_HostBindingHandler($event) {\n            return ctx.onAnimationEnd($event);\n          });\n        }\n        if (rf & 2) {\n          i0.ɵɵsyntheticHostProperty(\"@state\", ctx._animationState);\n        }\n      },\n      features: [i0.ɵɵInheritDefinitionFeature],\n      decls: 3,\n      vars: 3,\n      consts: [[\"aria-hidden\", \"true\"], [\"cdkPortalOutlet\", \"\"]],\n      template: function MatLegacySnackBarContainer_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0);\n          i0.ɵɵtemplate(1, MatLegacySnackBarContainer_ng_template_1_Template, 0, 0, \"ng-template\", 1);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(2, \"div\");\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(2);\n          i0.ɵɵattribute(\"aria-live\", ctx._live)(\"role\", ctx._role)(\"id\", ctx._liveElementId);\n        }\n      },\n      dependencies: [i1$1.CdkPortalOutlet],\n      styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\"],\n      encapsulation: 2,\n      data: {\n        animation: [matSnackBarAnimations.snackBarState]\n      }\n    });\n  }\n  return MatLegacySnackBarContainer;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * @deprecated Use `MatSnackBarModule` from `@angular/material/snack-bar` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nlet MatLegacySnackBarModule = /*#__PURE__*/(() => {\n  class MatLegacySnackBarModule {\n    static #_ = this.ɵfac = function MatLegacySnackBarModule_Factory(t) {\n      return new (t || MatLegacySnackBarModule)();\n    };\n    static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: MatLegacySnackBarModule\n    });\n    static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      imports: [OverlayModule, PortalModule, CommonModule, MatLegacyButtonModule, MatCommonModule, MatCommonModule]\n    });\n  }\n  return MatLegacySnackBarModule;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Service to dispatch Material Design snack bar messages.\n * @deprecated Use `MatSnackBar` from `@angular/material/snack-bar` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nlet MatLegacySnackBar = /*#__PURE__*/(() => {\n  class MatLegacySnackBar extends _MatSnackBarBase {\n    constructor(overlay, live, injector, breakpointObserver, parentSnackBar, defaultConfig) {\n      super(overlay, live, injector, breakpointObserver, parentSnackBar, defaultConfig);\n      this.simpleSnackBarComponent = LegacySimpleSnackBar;\n      this.snackBarContainerComponent = MatLegacySnackBarContainer;\n      this.handsetCssClass = 'mat-snack-bar-handset';\n    }\n    static #_ = this.ɵfac = function MatLegacySnackBar_Factory(t) {\n      return new (t || MatLegacySnackBar)(i0.ɵɵinject(i1$2.Overlay), i0.ɵɵinject(i2$1.LiveAnnouncer), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i3$1.BreakpointObserver), i0.ɵɵinject(MatLegacySnackBar, 12), i0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS));\n    };\n    static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: MatLegacySnackBar,\n      factory: MatLegacySnackBar.ɵfac,\n      providedIn: MatLegacySnackBarModule\n    });\n  }\n  return MatLegacySnackBar;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { LegacySimpleSnackBar, MatLegacySnackBar, MatLegacySnackBarContainer, MatLegacySnackBarModule };\n//# sourceMappingURL=legacy-snack-bar.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}