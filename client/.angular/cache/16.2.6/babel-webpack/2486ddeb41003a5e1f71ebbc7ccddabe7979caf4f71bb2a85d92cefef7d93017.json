{"ast":null,"code":"function isFalse(s) {\n  return typeof s !== 'number' && !s;\n}\nfunction strval(s) {\n  if (typeof s == 'string') {\n    return s;\n  } else if (typeof s == 'number') {\n    return s + '';\n  } else if (typeof s == 'function') {\n    return s();\n  } else if (s instanceof XMLWriter) {\n    return s.toString();\n  } else throw Error('Bad Parameter');\n}\nfunction XMLWriter(indent, callback) {\n  if (!(this instanceof XMLWriter)) {\n    return new XMLWriter();\n  }\n  this.name_regex = /[_:A-Za-z][-._:A-Za-z0-9]*/;\n  this.indent = indent ? true : false;\n  this.indentString = this.indent && typeof indent === 'string' ? indent : '    ';\n  this.output = '';\n  this.stack = [];\n  this.tags = 0;\n  this.attributes = 0;\n  this.attribute = 0;\n  this.texts = 0;\n  this.comment = 0;\n  this.dtd = 0;\n  this.root = '';\n  this.pi = 0;\n  this.cdata = 0;\n  this.started_write = false;\n  this.writer;\n  this.writer_encoding = 'UTF-8';\n  if (typeof callback == 'function') {\n    this.writer = callback;\n  } else {\n    this.writer = function (s, e) {\n      this.output += s;\n    };\n  }\n}\nXMLWriter.prototype = {\n  toString: function () {\n    this.flush();\n    return this.output;\n  },\n  indenter: function () {\n    if (this.indent) {\n      this.write('\\n');\n      for (var i = 1; i < this.tags; i++) {\n        this.write(this.indentString);\n      }\n    }\n  },\n  write: function () {\n    for (var i = 0; i < arguments.length; i++) {\n      this.writer(arguments[i], this.writer_encoding);\n    }\n  },\n  flush: function () {\n    for (var i = this.tags; i > 0; i--) {\n      this.endElement();\n    }\n    this.tags = 0;\n  },\n  startDocument: function (version, encoding, standalone) {\n    if (this.tags || this.attributes) return this;\n    this.startPI('xml');\n    this.startAttribute('version');\n    this.text(typeof version == \"string\" ? version : \"1.0\");\n    this.endAttribute();\n    if (typeof encoding == \"string\") {\n      this.startAttribute('encoding');\n      this.text(encoding);\n      this.endAttribute();\n      this.writer_encoding = encoding;\n    }\n    if (standalone) {\n      this.startAttribute('standalone');\n      this.text(\"yes\");\n      this.endAttribute();\n    }\n    this.endPI();\n    if (!this.indent) {\n      this.write('\\n');\n    }\n    return this;\n  },\n  endDocument: function () {\n    if (this.attributes) this.endAttributes();\n    return this;\n  },\n  writeElement: function (name, content) {\n    return this.startElement(name).text(content).endElement();\n  },\n  writeElementNS: function (prefix, name, uri, content) {\n    if (!content) {\n      content = uri;\n    }\n    return this.startElementNS(prefix, name, uri).text(content).endElement();\n  },\n  startElement: function (name) {\n    name = strval(name);\n    if (!name.match(this.name_regex)) throw Error('Invalid Parameter');\n    if (this.tags === 0 && this.root && this.root !== name) throw Error('Invalid Parameter');\n    if (this.attributes) this.endAttributes();\n    ++this.tags;\n    this.texts = 0;\n    if (this.stack.length > 0) this.stack[this.stack.length - 1].containsTag = true;\n    this.stack.push({\n      name: name,\n      tags: this.tags\n    });\n    if (this.started_write) this.indenter();\n    this.write('<', name);\n    this.startAttributes();\n    this.started_write = true;\n    return this;\n  },\n  startElementNS: function (prefix, name, uri) {\n    prefix = strval(prefix);\n    name = strval(name);\n    if (!prefix.match(this.name_regex)) throw Error('Invalid Parameter');\n    if (!name.match(this.name_regex)) throw Error('Invalid Parameter');\n    if (this.attributes) this.endAttributes();\n    ++this.tags;\n    this.texts = 0;\n    if (this.stack.length > 0) this.stack[this.stack.length - 1].containsTag = true;\n    this.stack.push({\n      name: prefix + ':' + name,\n      tags: this.tags\n    });\n    if (this.started_write) this.indenter();\n    this.write('<', prefix + ':' + name);\n    this.startAttributes();\n    this.started_write = true;\n    return this;\n  },\n  endElement: function () {\n    if (!this.tags) return this;\n    var t = this.stack.pop();\n    if (this.attributes > 0) {\n      if (this.attribute) {\n        if (this.texts) this.endAttribute();\n        this.endAttribute();\n      }\n      this.write('/');\n      this.endAttributes();\n    } else {\n      if (t.containsTag) this.indenter();\n      this.write('</', t.name, '>');\n    }\n    --this.tags;\n    this.texts = 0;\n    return this;\n  },\n  writeAttribute: function (name, content) {\n    if (typeof content == 'function') {\n      content = content();\n    }\n    if (isFalse(content)) {\n      return this;\n    }\n    return this.startAttribute(name).text(content).endAttribute();\n  },\n  writeAttributeNS: function (prefix, name, uri, content) {\n    if (!content) {\n      content = uri;\n    }\n    if (typeof content == 'function') {\n      content = content();\n    }\n    if (isFalse(content)) {\n      return this;\n    }\n    return this.startAttributeNS(prefix, name, uri).text(content).endAttribute();\n  },\n  startAttributes: function () {\n    this.attributes = 1;\n    return this;\n  },\n  endAttributes: function () {\n    if (!this.attributes) return this;\n    if (this.attribute) this.endAttribute();\n    this.attributes = 0;\n    this.attribute = 0;\n    this.texts = 0;\n    this.write('>');\n    return this;\n  },\n  startAttribute: function (name) {\n    name = strval(name);\n    if (!name.match(this.name_regex)) throw Error('Invalid Parameter');\n    if (!this.attributes && !this.pi) return this;\n    if (this.attribute) return this;\n    this.attribute = 1;\n    this.write(' ', name, '=\"');\n    return this;\n  },\n  startAttributeNS: function (prefix, name, uri) {\n    prefix = strval(prefix);\n    name = strval(name);\n    if (!prefix.match(this.name_regex)) throw Error('Invalid Parameter');\n    if (!name.match(this.name_regex)) throw Error('Invalid Parameter');\n    if (!this.attributes && !this.pi) return this;\n    if (this.attribute) return this;\n    this.attribute = 1;\n    this.write(' ', prefix + ':' + name, '=\"');\n    return this;\n  },\n  endAttribute: function () {\n    if (!this.attribute) return this;\n    this.attribute = 0;\n    this.texts = 0;\n    this.write('\"');\n    return this;\n  },\n  text: function (content) {\n    content = strval(content);\n    if (!this.tags && !this.comment && !this.pi && !this.cdata) return this;\n    if (this.attributes && this.attribute) {\n      ++this.texts;\n      this.write(content.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\"/g, '&quot;').replace(/\\t/g, '&#x9;').replace(/\\n/g, '&#xA;').replace(/\\r/g, '&#xD;'));\n      return this;\n    } else if (this.attributes && !this.attribute) {\n      this.endAttributes();\n    }\n    if (this.comment || this.cdata) {\n      this.write(content);\n    } else {\n      this.write(content.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;'));\n    }\n    ++this.texts;\n    this.started_write = true;\n    return this;\n  },\n  writeComment: function (content) {\n    return this.startComment().text(content).endComment();\n  },\n  startComment: function () {\n    if (this.comment) return this;\n    if (this.attributes) this.endAttributes();\n    this.indenter();\n    this.write('<!--');\n    this.comment = 1;\n    this.started_write = true;\n    return this;\n  },\n  endComment: function () {\n    if (!this.comment) return this;\n    this.write('-->');\n    this.comment = 0;\n    return this;\n  },\n  writeDocType: function (name, pubid, sysid, subset) {\n    return this.startDocType(name, pubid, sysid, subset).endDocType();\n  },\n  startDocType: function (name, pubid, sysid, subset) {\n    if (this.dtd || this.tags) return this;\n    name = strval(name);\n    pubid = pubid ? strval(pubid) : pubid;\n    sysid = sysid ? strval(sysid) : sysid;\n    subset = subset ? strval(subset) : subset;\n    if (!name.match(this.name_regex)) throw Error('Invalid Parameter');\n    if (pubid && !pubid.match(/^[\\w\\-][\\w\\s\\-\\/\\+\\:\\.]*/)) throw Error('Invalid Parameter');\n    if (sysid && !sysid.match(/^[\\w\\.][\\w\\-\\/\\\\\\:\\.]*/)) throw Error('Invalid Parameter');\n    if (subset && !subset.match(/[\\w\\s\\<\\>\\+\\.\\!\\#\\-\\?\\*\\,\\(\\)\\|]*/)) throw Error('Invalid Parameter');\n    pubid = pubid ? ' PUBLIC \"' + pubid + '\"' : sysid ? ' SYSTEM' : '';\n    sysid = sysid ? ' \"' + sysid + '\"' : '';\n    subset = subset ? ' [' + subset + ']' : '';\n    if (this.started_write) this.indenter();\n    this.write('<!DOCTYPE ', name, pubid, sysid, subset);\n    this.root = name;\n    this.dtd = 1;\n    this.started_write = true;\n    return this;\n  },\n  endDocType: function () {\n    if (!this.dtd) return this;\n    this.write('>');\n    return this;\n  },\n  writePI: function (name, content) {\n    return this.startPI(name).text(content).endPI();\n  },\n  startPI: function (name) {\n    name = strval(name);\n    if (!name.match(this.name_regex)) throw Error('Invalid Parameter');\n    if (this.pi) return this;\n    if (this.attributes) this.endAttributes();\n    if (this.started_write) this.indenter();\n    this.write('<?', name);\n    this.pi = 1;\n    this.started_write = true;\n    return this;\n  },\n  endPI: function () {\n    if (!this.pi) return this;\n    this.write('?>');\n    this.pi = 0;\n    return this;\n  },\n  writeCData: function (content) {\n    return this.startCData().text(content).endCData();\n  },\n  startCData: function () {\n    if (this.cdata) return this;\n    if (this.attributes) this.endAttributes();\n    this.indenter();\n    this.write('<![CDATA[');\n    this.cdata = 1;\n    this.started_write = true;\n    return this;\n  },\n  endCData: function () {\n    if (!this.cdata) return this;\n    this.write(']]>');\n    this.cdata = 0;\n    return this;\n  },\n  writeRaw: function (content) {\n    content = strval(content);\n    if (!this.tags && !this.comment && !this.pi && !this.cdata) return this;\n    if (this.attributes && this.attribute) {\n      ++this.texts;\n      this.write(content.replace('&', '&amp;').replace('\"', '&quot;'));\n      return this;\n    } else if (this.attributes && !this.attribute) {\n      this.endAttributes();\n    }\n    ++this.texts;\n    this.write(content);\n    this.started_write = true;\n    return this;\n  }\n};\nmodule.exports = XMLWriter;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}